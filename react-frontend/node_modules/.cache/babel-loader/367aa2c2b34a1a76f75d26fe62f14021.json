{"ast":null,"code":"'use strict';\n\nconst packageData = require('../../package.json');\n\nconst shared = require('../shared');\n\nconst LeWindows = require('../sendmail-transport/le-windows');\n\nconst LeUnix = require('../sendmail-transport/le-unix');\n/**\n * Generates a Transport object for streaming\n *\n * Possible options can be the following:\n *\n *  * **buffer** if true, then returns the message as a Buffer object instead of a stream\n *  * **newline** either 'windows' or 'unix'\n *\n * @constructor\n * @param {Object} optional config parameter\n */\n\n\nclass StreamTransport {\n  constructor(options) {\n    options = options || {};\n    this.options = options || {};\n    this.name = 'StreamTransport';\n    this.version = packageData.version;\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'stream-transport'\n    });\n    this.winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes((options.newline || '').toString().toLowerCase());\n  }\n  /**\n   * Compiles a mailcomposer message and forwards it to handler that sends it\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n\n\n  send(mail, done) {\n    // We probably need this in the output\n    mail.message.keepBcc = true;\n    let envelope = mail.data.envelope || mail.message.getEnvelope();\n    let messageId = mail.message.messageId();\n    let recipients = [].concat(envelope.to || []);\n\n    if (recipients.length > 3) {\n      recipients.push('...and ' + recipients.splice(2).length + ' more');\n    }\n\n    this.logger.info({\n      tnx: 'send',\n      messageId\n    }, 'Sending message %s to <%s> using %s line breaks', messageId, recipients.join(', '), this.winbreak ? '<CR><LF>' : '<LF>');\n    setImmediate(() => {\n      let sourceStream;\n      let stream;\n      let transform;\n\n      try {\n        transform = this.winbreak ? new LeWindows() : new LeUnix();\n        sourceStream = mail.message.createReadStream();\n        stream = sourceStream.pipe(transform);\n        sourceStream.on('error', err => stream.emit('error', err));\n      } catch (E) {\n        this.logger.error({\n          err: E,\n          tnx: 'send',\n          messageId\n        }, 'Creating send stream failed for %s. %s', messageId, E.message);\n        return done(E);\n      }\n\n      if (!this.options.buffer) {\n        stream.once('error', err => {\n          this.logger.error({\n            err,\n            tnx: 'send',\n            messageId\n          }, 'Failed creating message for %s. %s', messageId, err.message);\n        });\n        return done(null, {\n          envelope: mail.data.envelope || mail.message.getEnvelope(),\n          messageId,\n          message: stream\n        });\n      }\n\n      let chunks = [];\n      let chunklen = 0;\n      stream.on('readable', () => {\n        let chunk;\n\n        while ((chunk = stream.read()) !== null) {\n          chunks.push(chunk);\n          chunklen += chunk.length;\n        }\n      });\n      stream.once('error', err => {\n        this.logger.error({\n          err,\n          tnx: 'send',\n          messageId\n        }, 'Failed creating message for %s. %s', messageId, err.message);\n        return done(err);\n      });\n      stream.on('end', () => done(null, {\n        envelope: mail.data.envelope || mail.message.getEnvelope(),\n        messageId,\n        message: Buffer.concat(chunks, chunklen)\n      }));\n    });\n  }\n\n}\n\nmodule.exports = StreamTransport;","map":{"version":3,"names":["packageData","require","shared","LeWindows","LeUnix","StreamTransport","constructor","options","name","version","logger","getLogger","component","winbreak","includes","newline","toString","toLowerCase","send","mail","done","message","keepBcc","envelope","data","getEnvelope","messageId","recipients","concat","to","length","push","splice","info","tnx","join","setImmediate","sourceStream","stream","transform","createReadStream","pipe","on","err","emit","E","error","buffer","once","chunks","chunklen","chunk","read","Buffer","module","exports"],"sources":["/home/bijen/Desktop/LaravelReact/react-frontend/node_modules/nodemailer/lib/stream-transport/index.js"],"sourcesContent":["'use strict';\n\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\nconst LeWindows = require('../sendmail-transport/le-windows');\nconst LeUnix = require('../sendmail-transport/le-unix');\n\n/**\n * Generates a Transport object for streaming\n *\n * Possible options can be the following:\n *\n *  * **buffer** if true, then returns the message as a Buffer object instead of a stream\n *  * **newline** either 'windows' or 'unix'\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nclass StreamTransport {\n    constructor(options) {\n        options = options || {};\n\n        this.options = options || {};\n\n        this.name = 'StreamTransport';\n        this.version = packageData.version;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'stream-transport'\n        });\n\n        this.winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes((options.newline || '').toString().toLowerCase());\n    }\n\n    /**\n     * Compiles a mailcomposer message and forwards it to handler that sends it\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    send(mail, done) {\n        // We probably need this in the output\n        mail.message.keepBcc = true;\n\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId\n            },\n            'Sending message %s to <%s> using %s line breaks',\n            messageId,\n            recipients.join(', '),\n            this.winbreak ? '<CR><LF>' : '<LF>'\n        );\n\n        setImmediate(() => {\n            let sourceStream;\n            let stream;\n            let transform;\n\n            try {\n                transform = this.winbreak ? new LeWindows() : new LeUnix();\n                sourceStream = mail.message.createReadStream();\n                stream = sourceStream.pipe(transform);\n                sourceStream.on('error', err => stream.emit('error', err));\n            } catch (E) {\n                this.logger.error(\n                    {\n                        err: E,\n                        tnx: 'send',\n                        messageId\n                    },\n                    'Creating send stream failed for %s. %s',\n                    messageId,\n                    E.message\n                );\n                return done(E);\n            }\n\n            if (!this.options.buffer) {\n                stream.once('error', err => {\n                    this.logger.error(\n                        {\n                            err,\n                            tnx: 'send',\n                            messageId\n                        },\n                        'Failed creating message for %s. %s',\n                        messageId,\n                        err.message\n                    );\n                });\n                return done(null, {\n                    envelope: mail.data.envelope || mail.message.getEnvelope(),\n                    messageId,\n                    message: stream\n                });\n            }\n\n            let chunks = [];\n            let chunklen = 0;\n            stream.on('readable', () => {\n                let chunk;\n                while ((chunk = stream.read()) !== null) {\n                    chunks.push(chunk);\n                    chunklen += chunk.length;\n                }\n            });\n\n            stream.once('error', err => {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'send',\n                        messageId\n                    },\n                    'Failed creating message for %s. %s',\n                    messageId,\n                    err.message\n                );\n                return done(err);\n            });\n\n            stream.on('end', () =>\n                done(null, {\n                    envelope: mail.data.envelope || mail.message.getEnvelope(),\n                    messageId,\n                    message: Buffer.concat(chunks, chunklen)\n                })\n            );\n        });\n    }\n}\n\nmodule.exports = StreamTransport;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}