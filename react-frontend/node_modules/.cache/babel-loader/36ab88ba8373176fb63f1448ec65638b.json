{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController();\n    fetch(url, {\n      signal: abortCont.signal\n    }).then(res => {\n      if (!res.ok) {\n        // error coming back from server\n        throw Error('could not fetch the data for that resource');\n      }\n\n      return res.json();\n    }).then(data => {\n      setIsPending(false);\n      setData(data);\n      setError(null);\n    }).catch(err => {\n      if (err.name === 'AbortError') {\n        console.log('fetch aborted', res);\n      } else {\n        // auto catches network / connection error\n        setIsPending(false);\n        setError(err.message);\n      }\n    }); // abort the fetch\n\n    return () => abortCont.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\n\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","abortCont","AbortController","fetch","signal","then","res","ok","Error","json","catch","err","name","console","log","message","abort"],"sources":["/home/bijen/Desktop/LaravelReact/react-frontend/src/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const abortCont = new AbortController();\n\n\n      fetch(url, { signal: abortCont.signal })\n      .then(res => {\n        if (!res.ok) { // error coming back from server\n          throw Error('could not fetch the data for that resource');\n        } \n        return res.json();\n      })\n      .then(data => {\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n          console.log('fetch aborted',res)\n        } else {\n          // auto catches network / connection error\n          setIsPending(false);\n          setError(err.message);\n        }\n      })\n\n    // abort the fetch\n    return () => abortCont.abort();\n  }, [url])\n\n  return { data, isPending, error };\n}\n \nexport default useFetch;"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;EAAA;;EACxB,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;EAEAC,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAG,IAAIC,eAAJ,EAAlB;IAGEC,KAAK,CAACT,GAAD,EAAM;MAAEU,MAAM,EAAEH,SAAS,CAACG;IAApB,CAAN,CAAL,CACCC,IADD,CACMC,GAAG,IAAI;MACX,IAAI,CAACA,GAAG,CAACC,EAAT,EAAa;QAAE;QACb,MAAMC,KAAK,CAAC,4CAAD,CAAX;MACD;;MACD,OAAOF,GAAG,CAACG,IAAJ,EAAP;IACD,CAND,EAOCJ,IAPD,CAOMV,IAAI,IAAI;MACZG,YAAY,CAAC,KAAD,CAAZ;MACAF,OAAO,CAACD,IAAD,CAAP;MACAK,QAAQ,CAAC,IAAD,CAAR;IACD,CAXD,EAYCU,KAZD,CAYOC,GAAG,IAAI;MACZ,IAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;QAC7BC,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BR,GAA5B;MACD,CAFD,MAEO;QACL;QACAR,YAAY,CAAC,KAAD,CAAZ;QACAE,QAAQ,CAACW,GAAG,CAACI,OAAL,CAAR;MACD;IACF,CApBD,EAJY,CA0Bd;;IACA,OAAO,MAAMd,SAAS,CAACe,KAAV,EAAb;EACD,CA5BQ,EA4BN,CAACtB,GAAD,CA5BM,CAAT;EA8BA,OAAO;IAAEC,IAAF;IAAQE,SAAR;IAAmBE;EAAnB,CAAP;AACD,CApCD;;GAAMN,Q;;AAsCN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}